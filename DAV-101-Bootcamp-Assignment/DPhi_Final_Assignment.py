# -*- coding: utf-8 -*-
"""DPhi_Final_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ec3_lVYqIFfrQQHqNI37LY7QhRxsOj6i

# **Task 1: Data Loading and Data Aggregation**
"""

import pandas as pd

"""# **Task 1.1**"""

#Reading the Data

data_18 = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/IT_Salary_Survey_EU_18-20/Survey_2018.csv')
data_19 = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/IT_Salary_Survey_EU_18-20/Survey_2019.csv')
data_20 = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/IT_Salary_Survey_EU_18-20/Survey_2020.csv')

data_18.head()

data_19.head()

data_20.head()

"""# **Task 1.2**"""

#Data Aggregation

result_data = pd.concat([data_18, data_19, data_20], join='outer')

#presentation of Aggregated Data

result_data.head()

"""# **Task 2: Data Analysis**

# **Task 2.1**
"""

#First 5 Rows Dislay

data_18.head()

"""# **Task 2.2**"""

#Concise Summary of 2020 Data

data_20.info()

"""# **Observations:**
# **1. There are 19 columns of object datatype.**
# **2. There are 4 columns of float datatype.**
# **3. All the People have responded to 2 columns:** 
# **(i) City** 
# **(ii) Yearly brutto salary (without bonus and stocks) in EUR**
# **4. Lowest people responded to column - Have you been forced to have a shorter working week (Kurzarbeit)? If yes, how many hours per week**

# **Task 2.3**
"""

#Descriptive Statistics of the 2018 Survey Data

data_18.describe()

"""# **Task 2.4**"""

#Number of Missing values in each column of the 2018 Survey Data

data_18.isnull().sum()

#People responded to survey in 2018

len(data_18.index)

#People responded to survey in 2019

len(data_19.index)

#People responded to survey in 2020

len(data_20.index)

"""# **Number of People Responded to the survey Increased over time.**

# **Task 2.5**
"""

#Displaying Unique values of 2018 Data

data_18.nunique()

#Displaying Unique values of 2019 Data

data_19.nunique()

#Displaying Unique values of 2020 Data

data_20.nunique()

df = data_20['Number of vacation days']

#Unique Values for "Number of vacation days" for 2020 data

df.unique()

#Number of unique values for "Number of vacation days" for 2020 data

df.nunique()

"""# **Task 3: Data Cleaning**

# **Task 3.1**
"""

#Renaming the column

data_20.rename(columns = {'Position ':'Position'}, inplace = True)

"""# **Task 3.2**"""

data_20.info()

#Fill missing numerical values with -9999

data_20['Age']=data_20['Age'].fillna(-9999)
data_20['Yearly brutto salary (without bonus and stocks) in EUR']=data_20['Yearly brutto salary (without bonus and stocks) in EUR'].fillna(-9999)
data_20['Annual brutto salary (without bonus and stocks) one year ago. Only answer if staying in the same country']=data_20['Annual brutto salary (without bonus and stocks) one year ago. Only answer if staying in the same country'].fillna(-9999)
data_20['Have you been forced to have a shorter working week (Kurzarbeit)? If yes, how many hours per week']=data_20['Have you been forced to have a shorter working week (Kurzarbeit)? If yes, how many hours per week'].fillna(-9999)

#Filling missing categorical values with 'MISSING'

data_20=data_20.fillna('MISSING')

data_20.info()

"""# **Task 3.3**"""

#Dropping the timestamp column from all the three years data

data_18 = data_18.drop('Timestamp',axis=1)
data_19 = data_19.drop('Zeitstempel',axis=1)
data_20 = data_20.drop('Timestamp',axis=1)

"""# **Task 4: Data Visualization using Plotly**

#**Task 4.1**
"""

import plotly.express as px

dx = data_19['Company type']

dx.unique()

#Pie chart to analyse the company type in year 2019

fig = px.pie(dx,names='Company type')
fig.show(renderer='colab')

"""#**Consulting / Agency companies are not more popular than Startups**

#**Task 4.2**
"""

results_18 = pd.DataFrame()
for x in range(0,100):
  df1 = data_18[data_18['Years of experience'] == x] 
  y = df1["Current Salary"].mean()  
  tempResults = pd.DataFrame({'Current Salary':[y], 'Years of experience':[x]}) 
  results_18 = pd.concat([results_18,tempResults])
  results_18 = results_18[['Current Salary','Years of experience']]

results_18 = results_18.apply (pd.to_numeric, errors='coerce')
results_18 = results_18.dropna()
results_18

fig = px.line(results_18, x='Years of experience', y='Current Salary')
fig.show(renderer='colab')

"""#**Task 4.3**"""

results_19 = pd.DataFrame()
for x in range(0,100):
  df1 = data_19[data_19['Years of experience'] == x] 
  y = df1["Yearly brutto salary (without bonus and stocks)"].median()  
  tempResults = pd.DataFrame({'Yearly brutto salary (without bonus and stocks)':[y], 'Years of experience':[x]}) 
  results_19 = pd.concat([results_19,tempResults])
  results_19 = results_19[['Yearly brutto salary (without bonus and stocks)','Years of experience']]

results_19 = results_19.apply (pd.to_numeric, errors='coerce')
results_19 = results_19.dropna()
results_19

results_20 = pd.DataFrame()
data_20x = data_20.apply (pd.to_numeric, errors='coerce')
for x in range(0,100):
  df1 = data_20x[data_20x['Total years of experience'] == x] 
  y = df1["Yearly brutto salary (without bonus and stocks) in EUR"].median()  
  tempResults = pd.DataFrame({'Yearly brutto salary (without bonus and stocks) in EUR':[y], 'Total years of experience':[x]}) 
  results_20 = pd.concat([results_20,tempResults])
  results_20 = results_20[['Yearly brutto salary (without bonus and stocks) in EUR','Total years of experience']]

results_20 = results_20.dropna()
results_20

results_18 = results_18.rename(columns={"Current Salary": "2018"})
results_19 = results_19.rename(columns={"Yearly brutto salary (without bonus and stocks)": "2019"})
results_20 = results_20.rename(columns={"Yearly brutto salary (without bonus and stocks) in EUR": "2020"})

fig = px.line(results_18, x="Years of experience", y="2018", labels={"2018":"Salary"})
fig.add_scatter(x=results_19['Years of experience'], y=results_19['2019'])
fig.add_scatter(x=results_20['Total years of experience'], y=results_20['2020'])
fig.show(renderer='colab')

#Blue or initial line represents data of 2018
#Trace 1 represents data of 2019
#Trace 2 represents data of 2020

"""#**Task 4.4**"""

data_20y = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/IT_Salary_Survey_EU_18-20/Survey_2020.csv')
df = data_20y['Your main technology / programming language']
df

df.value_counts()

df = df.value_counts().rename_axis('Technology').reset_index(name='counts')
print (df)

df = df.dropna()

fig = px.bar(df, x='Technology', y='counts')
fig.show(renderer='colab')

"""#**Most Popular technology is Java**
#**There are so many technologies which get less than 4 responses, some of which are Kubernetes, Golang, Haskell etc.**

#**Task 4.5**
"""

data_20x = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/IT_Salary_Survey_EU_18-20/Survey_2020.csv')

dx = data_20x['Gender']
dx.unique()

#Pie chart to analyse the gender ratio in year 2020 "only those who responded"
dx = dx.dropna()

fig = px.pie(dx,names='Gender')
fig.show(renderer='colab')

